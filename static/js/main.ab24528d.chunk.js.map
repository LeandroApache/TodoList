{"version":3,"sources":["Components/UI/EditableSpan.tsx","Components/TodoList/TodoListItem/TodoListItem.tsx","Components/UI/AddItemForm.tsx","Components/TodoList/TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EditableSpan","props","useState","editMode","setEditMode","title","setTitle","TextField","type","value","color","size","label","onChange","e","currentTarget","onBlur","onUpdateTitle","autoFocus","onDoubleClick","useStyles","makeStyles","checkbox","listStyle","margin","padding","TodoListItem","classes","className","Checkbox","inputProps","checked","isDone","onClick","onChangeStatus","onUpdateTaskTitle","IconButton","aria-label","edge","onDeleteTask","AddItemForm","inputValue","setInputValue","error","setError","variant","required","helperText","onKeyPress","code","trim","onAddItem","Button","paper","textAlign","list","TodoList","Paper","startIcon","onDeleteTodoList","id","onUpdateTodoListTitle","taskTitle","onAddTask","tasks","map","el","newTaskTitle","ButtonGroup","filterValue","onChangeFilter","todoListId1","v1","todoListId2","App","setTasks","filter","todoLists","setTodoLists","addNewTaskHandler","todoListId","newTask","push","deleteTaskHandler","updatedTasks","t","changeStatusHandler","newTasks","updateTaskTitleHandler","taskId","currentTask","find","deleteTodoListHandler","newTodoLists","tl","changeFilterHandler","newFilterValue","updateTodoListTitleHandler","updatedTodoLists","Grid","container","spacing","justifyContent","alignItems","item","xs","newTitle","newTodoList","filteredTasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab24528d.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from \"react\";\nimport TextField from '@material-ui/core/TextField';\n\nexport type EditableSpanProps = {\n  title: string\n  onUpdateTitle: (title: string) => void\n}\n\nexport function EditableSpan(props: EditableSpanProps) {\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [title, setTitle] = useState<string>(\"\");\n  const onEditModeHandler = () => {\n    setTitle(props.title);\n    return setEditMode(true);\n  }\n  const offEditModeHandler = () => {\n    props.onUpdateTitle(title);\n    return setEditMode(false);\n  };\n  const updateTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value);\n  }\n\n  return (\n    <span>\n      {editMode\n        ? <TextField type=\"text\"\n                     value={title}\n                     color='primary'\n                     size=\"small\"\n                     label=\"Enter new text\"\n                     onChange={updateTitleHandler}\n                     onBlur={offEditModeHandler}\n                     autoFocus={true}/>\n        : <span onDoubleClick={onEditModeHandler}>{props.title}</span>}\n    </span>\n  )\n}","import React from 'react';\nimport {EditableSpan} from \"../../UI/EditableSpan\";\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  checkbox: {\n    listStyle: 'none',\n    margin: 0,\n    padding: 0\n  },\n});\n\n\nexport type todoListItemPropsType = {\n  title: string\n  isDone: boolean\n  onChangeStatus: () => void\n  onDeleteTask: () => void\n  onUpdateTaskTitle: (title: string) => void\n}\n\nexport function TodoListItem(props: todoListItemPropsType) {\n  const classes = useStyles();\n  return (\n    <li className={classes.checkbox}>\n      <Checkbox\n        color=\"default\"\n        inputProps={{'aria-label': 'checkbox with default color'}}\n        checked={props.isDone}\n        onClick={props.onChangeStatus}\n      />\n      <EditableSpan onUpdateTitle={props.onUpdateTaskTitle} title={props.title}/>\n      <IconButton aria-label=\"delete\" size=\"small\" edge=\"start\" onClick={props.onDeleteTask}>\n        <DeleteIcon/>\n      </IconButton>\n    </li>\n  );\n}\n\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport classes from \"./AddItemForm.module.css\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from '@material-ui/core/TextField';\n\nexport type addItemFormProps = {\n  onAddItem: (value: string) => void\n}\n\nexport function AddItemForm(props: addItemFormProps) {\n  const [inputValue, setInputValue] = useState<string>(\"\");\n  const [error, setError] = useState<boolean>(false);\n\n  const updateInputValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setError(false);\n    setInputValue(e.currentTarget.value);\n  }\n  const addNewTasksHandler = () => {\n    if (!inputValue.trim()) {\n      setError(true);\n    } else {\n      props.onAddItem(inputValue);\n      setInputValue(\"\");\n    }\n  }\n\n  const keyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.code === \"Enter\") {\n      if (!inputValue.trim()) {\n        setError(true);\n      } else {\n        props.onAddItem(inputValue);\n        setInputValue(\"\");\n      }\n    }\n  }\n\n  return (\n    <div>\n      <TextField type=\"text\"\n                 value={inputValue}\n                 color='primary'\n                 variant=\"outlined\"\n                 label=\"Enter value\"\n                 size='small'\n                 required\n                 error={error}\n                 helperText={error ? \"Incorrect entry.\" : \"\"}\n                 onChange={updateInputValueHandler}\n                 onKeyPress={keyPressHandler}/>\n      <Button onClick={addNewTasksHandler} color=\"primary\" variant=\"contained\" size=\"large\">+</Button>\n    </div>\n  )\n}","import React from 'react';\nimport classes from \"./TodoList.module.css\";\nimport {filterType, tasksItemType} from \"../../App\";\nimport {TodoListItem} from \"./TodoListItem/TodoListItem\";\nimport {AddItemForm} from \"../UI/AddItemForm\";\nimport {EditableSpan} from \"../UI/EditableSpan\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Paper from '@material-ui/core/Paper';\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  paper: {\n    padding: 10,\n    textAlign: \"center\"\n  },\n  list: {\n    listStyle: 'none',\n    padding: 0,\n    margin: 0\n  }\n});\n\n\nexport type todolistPropsType = {\n  tasks: Array<tasksItemType>\n  title: string\n  id: string\n  filterValue: filterType\n  onAddTask: (title: string, todoListId: string) => void\n  onChangeStatus: (id: string, todoListId: string) => void\n  onChangeFilter: (value: filterType, todoListId: string) => void\n  onDeleteTask: (id: string, todoListId: string) => void\n  onDeleteTodoList: (todoListId: string) => void\n  onUpdateTaskTitle: (taskId: string, newTaskTitle: string, todoListId: string) => void\n  onUpdateTodoListTitle: (newTaskTitle: string, todoListId: string) => void\n}\n\nexport function TodoList(props: todolistPropsType) {\n  const classes = useStyles();\n\n  const allFilterHandler = () => {\n    props.onChangeFilter(\"ALL\", props.id);\n  }\n  const activeFilterHandler = () => {\n    props.onChangeFilter(\"ACTIVE\", props.id);\n  }\n  const completedFilterHandler = () => {\n    props.onChangeFilter(\"COMPLETED\", props.id);\n  }\n  const deleteTodoListHandler = () => {\n    props.onDeleteTodoList(props.id);\n  }\n  const addNewTaskHandler = (taskTitle: string) => {\n    props.onAddTask(taskTitle, props.id)\n  }\n  const updateTodoListTitleHandler = (title: string) => {\n    props.onUpdateTodoListTitle(title, props.id);\n  }\n\n  return (\n    <Paper className={classes.paper}>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        startIcon={<DeleteIcon/>}\n        onClick={deleteTodoListHandler}\n      >Delete TodoList</Button>\n      <h2>\n        <EditableSpan title={props.title} onUpdateTitle={updateTodoListTitleHandler}/>\n      </h2>\n      <AddItemForm onAddItem={addNewTaskHandler}/>\n      <div>\n        <ul className={classes.list}>\n          {props.tasks.map(el => {\n            const changeStatusHandler = () => {\n              props.onChangeStatus(el.id, props.id);\n            }\n            const deleteTaskHandler = () => {\n              props.onDeleteTask(el.id, props.id);\n            }\n            const updateTaskTitleHandler = (newTaskTitle: string) => {\n              props.onUpdateTaskTitle(el.id, newTaskTitle, props.id);\n            }\n            return <TodoListItem\n              key={el.id}\n              title={el.title}\n              isDone={el.isDone}\n              onChangeStatus={changeStatusHandler}\n              onDeleteTask={deleteTaskHandler}\n              onUpdateTaskTitle={updateTaskTitleHandler}/>\n          })}\n        </ul>\n      </div>\n      <div>\n        <ButtonGroup size=\"small\" color=\"primary\" aria-label=\"outlined primary button group\">\n          <Button variant=\"contained\" size=\"small\" color={props.filterValue === \"ALL\" ? \"secondary\" : \"primary\"} onClick={allFilterHandler}>All</Button>\n          <Button variant=\"contained\" size=\"small\" color={props.filterValue === \"ACTIVE\" ? \"secondary\" : \"primary\"} onClick={activeFilterHandler}>Active\n          </Button>\n          <Button variant=\"contained\" size=\"small\" color={props.filterValue === \"COMPLETED\" ? \"secondary\" : \"primary\"}\n                  onClick={completedFilterHandler}>Completed\n          </Button>\n        </ButtonGroup>\n      </div>\n    </Paper>\n  );\n}\n\n","import React, {useState} from 'react';\nimport './App.css';\nimport {v1} from \"uuid\";\nimport {TodoList} from \"./Components/TodoList/TodoList\";\nimport {AddItemForm} from \"./Components/UI/AddItemForm\";\nimport Grid, {GridSpacing} from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  paper: {\n    padding: 10,\n  },\n});\n\nexport type tasksType = {\n  [a: string]: Array<tasksItemType>\n}\nexport type tasksItemType = {\n  id: string\n  title: string\n  isDone: boolean\n};\nexport type filterType = \"ALL\" | \"ACTIVE\" | \"COMPLETED\";\nexport type todoListType = {\n  id: string\n  title: string\n  filter: filterType\n}\nconst todoListId1 = v1();\nconst todoListId2 = v1();\n\nfunction App() {\n  const classes = useStyles();\n  const [tasks, setTasks] = useState<tasksType>({\n    [todoListId1]: [\n      {id: v1(), title: \"HTML\", isDone: true},\n      {id: v1(), title: \"JS\", isDone: true},\n      {id: v1(), title: \"React\", isDone: true},\n      {id: v1(), title: \"Redux\", isDone: false},\n    ],\n    [todoListId2]: [\n      {id: v1(), title: \"Book\", isDone: false},\n      {id: v1(), title: \"Phone\", isDone: true},\n      {id: v1(), title: \"Bread\", isDone: false},\n      {id: v1(), title: \"Beer\", isDone: true},\n    ]\n  })\n  const [todoLists, setTodoLists] = useState<Array<todoListType>>([\n    {id: todoListId1, title: \"What to learn\", filter: \"ALL\"},\n    {id: todoListId2, title: \"What to buy\", filter: \"ACTIVE\"},\n  ])\n\n  const addNewTaskHandler = (title: string, todoListId: string) => {\n    let newTask = {\n      id: v1(), title, isDone: false\n    }\n    tasks[todoListId].push(newTask);\n    setTasks({...tasks});\n  }\n  const deleteTaskHandler = (id: string, todoListId: string) => {\n    let updatedTasks = tasks[todoListId].filter(t => t.id !== id);\n    tasks[todoListId] = updatedTasks;\n    setTasks({...tasks});\n  }\n  const changeStatusHandler = (id: string, todoListId: string) => {\n    const newTasks = tasks[todoListId].map(el => el.id === id ? {...el, isDone: !el.isDone} : el);\n    tasks[todoListId] = newTasks;\n    setTasks({...tasks});\n  }\n  const updateTaskTitleHandler = (taskId: string, newTaskTitle: string, todoListId: string) => {\n    const currentTask = tasks[todoListId].find(t => t.id === taskId);\n    if (currentTask) {\n      currentTask.title = newTaskTitle;\n    }\n    setTasks({...tasks});\n  }\n\n  const addNewTodoListHandler = (newTitle: string) => {\n    const newTodoList: todoListType = {id: v1(), title: newTitle, filter: \"ALL\"};\n    setTodoLists([newTodoList, ...todoLists]);\n    tasks[newTodoList.id] = [];\n  }\n  const deleteTodoListHandler = (todoListId: string) => {\n    let newTodoLists = todoLists.filter(tl => tl.id != todoListId);\n    setTodoLists(newTodoLists);\n    delete tasks[todoListId];\n  }\n  const changeFilterHandler = (newFilterValue: filterType, todoListId: string) => {\n    let newTodoLists: Array<todoListType> = todoLists.map(tl => tl.id === todoListId ? {\n      ...tl,\n      filter: newFilterValue\n    } : tl)\n    setTodoLists(newTodoLists);\n  }\n  const updateTodoListTitleHandler = (newTaskTitle: string, todoListId: string) => {\n    const updatedTodoLists = todoLists.map(tl => tl.id === todoListId ? {...tl, title: newTaskTitle} : tl)\n    setTodoLists(updatedTodoLists);\n  }\n\n  return (\n    <div className=\"App\">\n      <Grid container spacing={5}>\n        <Grid container justifyContent=\"center\"\n              alignItems=\"center\" item xs={12}>\n          <Paper className={classes.paper}>\n            <AddItemForm onAddItem={addNewTodoListHandler}/>\n          </Paper>\n        </Grid>\n        <Grid item xs={12} container justifyContent=\"space-around\" alignItems=\"flex-start\" spacing={2}>\n          {todoLists.map(tl => {\n            let filteredTasks = tasks[tl.id];\n            if (tl.filter === \"ACTIVE\") {\n              filteredTasks = tasks[tl.id].filter(t => !t.isDone)\n            }\n            if (tl.filter === \"COMPLETED\") {\n              filteredTasks = tasks[tl.id].filter(t => t.isDone)\n            }\n            return <Grid item>\n              <TodoList key={tl.id}\n                        id={tl.id}\n                        title={tl.title}\n                        tasks={filteredTasks}\n                        filterValue={tl.filter}\n                        onAddTask={addNewTaskHandler}\n                        onChangeStatus={changeStatusHandler}\n                        onChangeFilter={changeFilterHandler}\n                        onDeleteTask={deleteTaskHandler}\n                        onDeleteTodoList={deleteTodoListHandler}\n                        onUpdateTaskTitle={updateTaskTitleHandler}\n                        onUpdateTodoListTitle={updateTodoListTitleHandler}/>\n            </Grid>\n          })}\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}