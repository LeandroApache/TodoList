{"version":3,"sources":["Components/TodoList/TodoList.module.css","Components/UI/AddItemForm.module.css","Components/TodoList/TodoListItem/TodoListItem.module.css","Components/UI/EditableSpan.tsx","Components/TodoList/TodoListItem/TodoListItem.tsx","Components/UI/AddItemForm.tsx","Components/TodoList/TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","EditableSpan","props","useState","editMode","setEditMode","title","setTitle","type","value","onChange","e","currentTarget","onBlur","onUpdateTitle","autoFocus","onDoubleClick","TodoListItem","className","classes","item","id","checked","isDone","onClick","onChangeStatus","onUpdateTaskTitle","onDeleteTask","AddItemForm","inputValue","setInputValue","error","setError","onKeyPress","code","trim","onAddItem","dropdown","TodoList","todoList","onDeleteTodoList","onUpdateTodoListTitle","taskTitle","onAddTask","tasks","map","el","newTaskTitle","controls","filterValue","active","onChangeFilter","todoListId1","v1","todoListId2","App","setTasks","filter","todoLists","setTodoLists","addNewTaskHandler","todoListId","newTask","push","deleteTaskHandler","updatedTasks","t","changeStatusHandler","newTasks","updateTaskTitleHandler","taskId","currentTask","find","deleteTodoListHandler","newTodoLists","tl","changeFilterHandler","newFilterValue","updateTodoListTitleHandler","updatedTodoLists","newTitle","newTodoList","filteredTasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c0f030f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoList\":\"TodoList_todoList__1Qy9a\",\"active\":\"TodoList_active__3eQBq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"AddItemForm_error__2RWhV\",\"dropdown\":\"AddItemForm_dropdown__16vrs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"TodoListItem_item__T2GFA\"};","import React, {ChangeEvent, useState} from \"react\";\n\nexport type EditableSpanProps = {\n  title: string\n  onUpdateTitle: (title: string) => void\n}\n\nexport function EditableSpan(props: EditableSpanProps) {\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [title, setTitle] = useState<string>(\"\");\n  const onEditModeHandler = () => {\n    setTitle(props.title);\n    return setEditMode(true);\n  }\n  const offEditModeHandler = () => {\n    props.onUpdateTitle(title);\n    return setEditMode(false);\n  };\n  const updateTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value);\n  }\n\n  return (\n    <span>\n      {editMode\n        ? <input type=\"text\"\n                 value={title}\n                 onChange={updateTitleHandler}\n                 onBlur={offEditModeHandler}\n                 autoFocus={true}/>\n        : <span onDoubleClick={onEditModeHandler}>{props.title}</span>}\n    </span>\n  )\n}","import React from 'react';\nimport classes from \"./TodoListItem.module.css\";\nimport {EditableSpan} from \"../../UI/EditableSpan\";\n\nexport type todoListItemPropsType = {\n  title: string\n  isDone: boolean\n  onChangeStatus: () => void\n  onDeleteTask: ()=> void\n  onUpdateTaskTitle: (title: string) => void\n}\n\nexport function TodoListItem(props: todoListItemPropsType) {\n  return (\n    <li className={classes.item} >\n      <input id={\"input\"} type=\"checkbox\" checked={props.isDone} onClick={props.onChangeStatus}/>\n      {/*<span>{props.title}</span>*/}\n      <EditableSpan onUpdateTitle={props.onUpdateTaskTitle} title={props.title}/>\n      <button onClick={props.onDeleteTask}>X</button>\n    </li>\n  );\n}\n\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport classes from \"./AddItemForm.module.css\";\n\nexport type addItemFormProps = {\n  onAddItem: (value: string) => void\n}\n\nexport function AddItemForm(props: addItemFormProps){\n  const [inputValue, setInputValue] = useState<string>(\"\");\n  const [error, setError] = useState<boolean>(false);\n\n  const updateInputValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setError(false);\n    setInputValue(e.currentTarget.value);\n  }\n  const addNewTasksHandler = () => {\n    if (!inputValue.trim()) {\n      setError(true);\n    } else {\n      props.onAddItem(inputValue);\n      setInputValue(\"\");\n    }\n  }\n\n  const keyPressHandler = (e: KeyboardEvent<HTMLInputElement>)=>{\n    if (e.code === \"Enter\") {\n      if (!inputValue.trim()) {\n        setError(true);\n      } else {\n        props.onAddItem(inputValue);\n        setInputValue(\"\");\n      }\n    }\n  }\n\n  return (\n    <div>\n      <input type=\"text\"\n             value={inputValue}\n             className={error ? classes.error : \"\"}\n             onChange={updateInputValueHandler}\n             onKeyPress={keyPressHandler}/>\n      <button onClick={addNewTasksHandler}>Add new task</button>\n      {error && <div className={classes.dropdown}>Invalid input!!!</div>}\n    </div>\n  )\n}","import React from 'react';\nimport classes from \"./TodoList.module.css\";\nimport {filterType, tasksItemType} from \"../../App\";\nimport {TodoListItem} from \"./TodoListItem/TodoListItem\";\nimport {AddItemForm} from \"../UI/AddItemForm\";\nimport {EditableSpan} from \"../UI/EditableSpan\";\n\nexport type todolistPropsType = {\n  tasks: Array<tasksItemType>\n  title: string\n  id: string\n  filterValue: filterType\n  onAddTask: (title: string, todoListId: string) => void\n  onChangeStatus: (id: string, todoListId: string) => void\n  onChangeFilter: (value: filterType, todoListId: string) => void\n  onDeleteTask: (id: string, todoListId: string) => void\n  onDeleteTodoList: (todoListId: string) => void\n  onUpdateTaskTitle: (taskId: string, newTaskTitle: string, todoListId: string) => void\n  onUpdateTodoListTitle: (newTaskTitle: string, todoListId: string) => void\n}\n\nexport function TodoList(props: todolistPropsType) {\n\n  const allFilterHandler = () => {\n    props.onChangeFilter(\"ALL\", props.id);\n  }\n  const activeFilterHandler = () => {\n    props.onChangeFilter(\"ACTIVE\", props.id);\n  }\n  const completedFilterHandler = () => {\n    props.onChangeFilter(\"COMPLETED\", props.id);\n  }\n  const deleteTodoListHandler = () => {\n    props.onDeleteTodoList(props.id);\n  }\n  const addNewTaskHandler = (taskTitle: string) => {\n    props.onAddTask(taskTitle, props.id)\n  }\n  const updateTodoListTitleHandler = (title: string) => {\n    props.onUpdateTodoListTitle(title, props.id);\n  }\n\n  return (\n    <div className={classes.todoList}>\n      <button onClick={deleteTodoListHandler}>Delete todolist</button>\n      <h2>\n        <EditableSpan title={props.title} onUpdateTitle={updateTodoListTitleHandler}/>\n      </h2>\n      <AddItemForm onAddItem={addNewTaskHandler}/>\n      <div>\n        <ul>\n          {props.tasks.map(el => {\n            const changeStatusHandler = () => {\n              props.onChangeStatus(el.id, props.id);\n            }\n            const deleteTaskHandler = () => {\n              props.onDeleteTask(el.id, props.id);\n            }\n            const updateTaskTitleHandler = (newTaskTitle: string) => {\n              props.onUpdateTaskTitle(el.id, newTaskTitle, props.id);\n            }\n            return <TodoListItem\n              key={el.id}\n              title={el.title}\n              isDone={el.isDone}\n              onChangeStatus={changeStatusHandler}\n              onDeleteTask={deleteTaskHandler}\n              onUpdateTaskTitle={updateTaskTitleHandler}/>\n          })}\n        </ul>\n      </div>\n      <div className={classes.controls}>\n        <button className={props.filterValue === \"ALL\" ? classes.active : \"\"} onClick={allFilterHandler}>All</button>\n        <button className={props.filterValue === \"ACTIVE\" ? classes.active : \"\"} onClick={activeFilterHandler}>Active\n        </button>\n        <button className={props.filterValue === \"COMPLETED\" ? classes.active : \"\"}\n                onClick={completedFilterHandler}>Completed\n        </button>\n      </div>\n    </div>\n  );\n}\n\n","import React, {ChangeEvent, useState} from 'react';\nimport './App.css';\nimport {v1} from \"uuid\";\nimport {TodoList} from \"./Components/TodoList/TodoList\";\nimport {AddItemForm} from \"./Components/UI/AddItemForm\";\n\nexport type tasksType = {\n  [a: string]: Array<tasksItemType>\n}\nexport type tasksItemType = {\n  id: string\n  title: string\n  isDone: boolean\n};\nexport type filterType = \"ALL\" | \"ACTIVE\" | \"COMPLETED\";\nexport type todoListType = {\n  id: string\n  title: string\n  filter: filterType\n}\nconst todoListId1 = v1();\nconst todoListId2 = v1();\n\nfunction App() {\n  const [tasks, setTasks] = useState<tasksType>({\n    [todoListId1]: [\n      {id: v1(), title: \"HTML\", isDone: true},\n      {id: v1(), title: \"JS\", isDone: true},\n      {id: v1(), title: \"React\", isDone: true},\n      {id: v1(), title: \"Redux\", isDone: false},\n    ],\n    [todoListId2]: [\n      {id: v1(), title: \"Book\", isDone: false},\n      {id: v1(), title: \"Phone\", isDone: true},\n      {id: v1(), title: \"Bread\", isDone: false},\n      {id: v1(), title: \"Beer\", isDone: true},\n    ]\n  })\n  const [todoLists, setTodoLists] = useState<Array<todoListType>>([\n    {id: todoListId1, title: \"What to learn\", filter: \"ALL\"},\n    {id: todoListId2, title: \"What to buy\", filter: \"ACTIVE\"},\n  ])\n\n  const addNewTaskHandler = (title: string, todoListId: string) => {\n    let newTask = {\n      id: v1(), title, isDone: false\n    }\n    tasks[todoListId].push(newTask);\n    setTasks({...tasks});\n  }\n  const deleteTaskHandler = (id: string, todoListId: string) => {\n    let updatedTasks = tasks[todoListId].filter(t => t.id !== id);\n    tasks[todoListId] = updatedTasks;\n    setTasks({...tasks});\n  }\n  const changeStatusHandler = (id: string, todoListId: string) => {\n    const newTasks = tasks[todoListId].map(el => el.id === id ? {...el, isDone: !el.isDone} : el);\n    tasks[todoListId] = newTasks;\n    setTasks({...tasks});\n  }\n  const updateTaskTitleHandler = (taskId: string, newTaskTitle: string, todoListId: string) => {\n    const currentTask = tasks[todoListId].find(t => t.id === taskId);\n    if (currentTask) {\n      currentTask.title = newTaskTitle;\n    }\n    setTasks({...tasks});\n  }\n\n  const addNewTodoListHandler = (newTitle: string) => {\n    const newTodoList: todoListType = {id: v1(), title: newTitle, filter: \"ALL\"};\n    setTodoLists([newTodoList, ...todoLists]);\n    tasks[newTodoList.id] = [];\n  }\n  const deleteTodoListHandler = (todoListId: string) => {\n    let newTodoLists = todoLists.filter(tl => tl.id != todoListId);\n    setTodoLists(newTodoLists);\n    delete tasks[todoListId];\n  }\n  const changeFilterHandler = (newFilterValue: filterType, todoListId: string) => {\n    let newTodoLists: Array<todoListType> = todoLists.map(tl => tl.id === todoListId ? {\n      ...tl,\n      filter: newFilterValue\n    } : tl)\n    setTodoLists(newTodoLists);\n  }\n  const updateTodoListTitleHandler = (newTaskTitle: string, todoListId: string) => {\n    const updatedTodoLists = todoLists.map(tl => tl.id === todoListId ? {...tl, title: newTaskTitle} : tl)\n    setTodoLists(updatedTodoLists);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className={\"app_row\"}>\n        <div className={'app_column'}>\n          <div className={'app_header'}>\n            <AddItemForm onAddItem={addNewTodoListHandler}/>\n          </div>\n        </div>\n        <div className={'app_column'}>\n          <div className={'app_body'}>\n            {todoLists.map(tl => {\n              let filteredTasks = tasks[tl.id];\n              if (tl.filter === \"ACTIVE\") {\n                filteredTasks = tasks[tl.id].filter(t => !t.isDone)\n              }\n              if (tl.filter === \"COMPLETED\") {\n                filteredTasks = tasks[tl.id].filter(t => t.isDone)\n              }\n              return <TodoList key={tl.id}\n                               id={tl.id}\n                               title={tl.title}\n                               tasks={filteredTasks}\n                               filterValue={tl.filter}\n                               onAddTask={addNewTaskHandler}\n                               onChangeStatus={changeStatusHandler}\n                               onChangeFilter={changeFilterHandler}\n                               onDeleteTask={deleteTaskHandler}\n                               onDeleteTodoList={deleteTodoListHandler}\n                               onUpdateTaskTitle={updateTaskTitleHandler}\n                               onUpdateTodoListTitle={updateTodoListTitleHandler}/>\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}